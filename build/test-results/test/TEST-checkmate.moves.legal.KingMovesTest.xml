<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="checkmate.moves.legal.KingMovesTest" tests="22" skipped="0" failures="0" errors="0" timestamp="2025-01-26T09:42:24" hostname="MacBook-Pro.fritz.box" time="0.013">
  <properties/>
  <testcase name="white king should be able to perform king side castling()" classname="checkmate.moves.legal.KingMovesTest" time="0.001"/>
  <testcase name="black king should not be able to perform queen side castling when piece in between()" classname="checkmate.moves.legal.KingMovesTest" time="0.001"/>
  <testcase name="black king should not be able to perform king side castling when its not possible()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <testcase name="black king should not be able to perform king side castling when king needs to move through check()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <testcase name="white king should not be able to perform king side castling when king is in check()" classname="checkmate.moves.legal.KingMovesTest" time="0.001"/>
  <testcase name="black king should not be able to move into check()" classname="checkmate.moves.legal.KingMovesTest" time="0.001"/>
  <testcase name="white king should not be able to perform queen side castling when king needs to move through check()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <testcase name="black king should be able to perform king side castling()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <testcase name="white king should not be able to perform king side castling when king needs to move through check()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <testcase name="white king should not be able to perform queen side castling when piece in between()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <testcase name="black king should be able to perform queen side castling()" classname="checkmate.moves.legal.KingMovesTest" time="0.001"/>
  <testcase name="black king should not be able to perform king side castling when king is in check()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <testcase name="black king should not be able to perform queen side castling when its not possible()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <testcase name="white king should not be able to perform king side castling when piece in between()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <testcase name="white king should not be able to move into check()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <testcase name="white king should not be able to perform queen side castling when its not possible()" classname="checkmate.moves.legal.KingMovesTest" time="0.001"/>
  <testcase name="black king should not be able to perform king side castling when piece in between()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <testcase name="black king should not be able to perform queen side castling when king is in check()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <testcase name="black king should not be able to perform queen side castling when king needs to move through check()" classname="checkmate.moves.legal.KingMovesTest" time="0.001"/>
  <testcase name="white king should not be able to perform queen side castling when king is in check()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <testcase name="white king should not be able to perform king side castling when its not possible()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <testcase name="white king should be able to perform queen side castling()" classname="checkmate.moves.legal.KingMovesTest" time="0.0"/>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
